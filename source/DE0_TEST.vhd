----------------------------------------------------------------------------------------------------
--  This code is generated by Terasic System Builder
--
--
-- Author : Hichem YOUSSFI
--
-- Date : 27/04/2017 20h00
--
-- Description : Top Level Entity (DE0_TEST)
--
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
-- LIBRARY
----------------------------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

----------------------------------------------------------------------------------------------------
-- ENTITY
----------------------------------------------------------------------------------------------------
entity DE0_TEST is
   port
   (
      ------------ CLOCK ----------
      CLOCK_50    : in     std_logic;

      ------------ LED ----------
      LED         : out    std_logic_vector(7 downto 0);

      ------------ KEY ----------
      KEY         : in     std_logic_vector(1 downto 0);

      ------------ SDRAM ----------
      DRAM_ADDR   : out    std_logic_vector(12 downto 0);
      DRAM_BA     : out    std_logic_vector(1 downto 0);
      DRAM_CAS_N  : out    std_logic;
      DRAM_CKE    : out    std_logic;
      DRAM_CLK    : out    std_logic;
      DRAM_CS_N   : out    std_logic;
      DRAM_DQ     : inout  std_logic_vector(15 downto 0);
      DRAM_DQM    : out    std_logic_vector(1 downto 0);
      DRAM_RAS_N  : out    std_logic;
      DRAM_WE_N   : out    std_logic--;

      -- ------------ 2x13 GPIO Header ----------
      -- GPIO_2      : inout  std_logic_vector(12 downto 0);
      -- GPIO_2_IN   : in     std_logic_vector(2 downto 0);

      -- ------------ GPIO_0, GPIO_0 connect to GPIO Default ----------
      -- gpio0: inout         std_logic_vector(33 downto 0);
      -- gpio0_IN: in         std_logic_vector(1 downto 0);

      -- ------------ GPIO_1, GPIO_1 connect to GPIO Default ----------
      -- gpio1: inout         std_logic_vector(33 downto 0);
      -- gpio1_IN: in         std_logic_vector(12 downto 0)
  );
end entity DE0_TEST;


----------------------------------------------------------------------------------------------------
-- ARCHTITECTURE
----------------------------------------------------------------------------------------------------
architecture structural of DE0_TEST is
----------------------------------------------------------------------------------------------------
-- CONSTANT
----------------------------------------------------------------------------------------------------
constant c_ENABLE_BUSWIDTH                : natural := 1; -- Max value = 32
----------------------------------------------------------------------------------------------------
-- TYPE
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- COMPONENT
----------------------------------------------------------------------------------------------------

   component DE0_TEST_Nios is
     port
     (
         reset_reset_n                    : in    std_logic                     := 'X';             -- reset_n
         clk_clk                          : in    std_logic                     := 'X';             -- clk
         -- out_port_from_the_pio_led        : out   std_logic_vector(7 downto 0);                     -- export
         sdram_wire_addr                  : out   std_logic_vector(12 downto 0);                    -- addr
         sdram_wire_ba                    : out   std_logic_vector(1 downto 0);                     -- ba
         sdram_wire_cas_n                 : out   std_logic;                                        -- cas_n
         sdram_wire_cke                   : out   std_logic;                                        -- cke
         sdram_wire_cs_n                  : out   std_logic;                                        -- cs_n
         sdram_wire_dq                    : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
         sdram_wire_dqm                   : out   std_logic_vector(1 downto 0);                     -- dqm
         sdram_wire_ras_n                 : out   std_logic;                                        -- ras_n
         sdram_wire_we_n                  : out   std_logic;                                        -- we_n
         altpll_sdram_clk                 : out   std_logic;                                        -- clk
         altpll_areset_conduit_export     : in    std_logic                     := 'X';             -- export
         altpll_locked_conduit_export     : out   std_logic;                                        -- export
         altpll_phasedone_conduit_export  : out   std_logic;                                        -- export
         uart_0_rxd                       : in    std_logic                     := 'X';             -- rxd
         uart_0_txd                       : out   std_logic;                                        -- txd
         ff_rd_valid                      : out   std_logic;                                        -- valid
         ff_rd_data                       : out   std_logic_vector(31 downto 0);                    -- data
         ff_rd_channel                    : out   std_logic_vector(7 downto 0);                     -- channel
         ff_rd_error                      : out   std_logic_vector(7 downto 0);                     -- error
         ff_rd_startofpacket              : out   std_logic;                                        -- startofpacket
         ff_rd_endofpacket                : out   std_logic;                                        -- endofpacket
         ff_rd_ready                      : in    std_logic                     := 'X';             -- ready
         ff_wr_valid                      : in    std_logic                     := 'X';             -- valid
         ff_wr_data                       : in    std_logic_vector(31 downto 0) := (others => 'X'); -- data
         ff_wr_channel                    : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- channel
         ff_wr_error                      : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- error
         ff_wr_startofpacket              : in    std_logic                     := 'X';             -- startofpacket
         ff_wr_endofpacket                : in    std_logic                     := 'X';             -- endofpacket
         ff_wr_ready                      : out   std_logic;                                        -- ready
         enable_io_export                 : out   std_logic_vector(31 downto 0)                     -- export
      );
   end component DE0_TEST_Nios;

   component VIP_TOP is
      port
      (
         srce_valid                       : out   std_logic;
         srce_data                        : out   std_logic_vector(31 downto 0);
         srce_channel                     : out   std_logic_vector(7 downto 0);
         srce_error                       : out   std_logic_vector(7 downto 0);
         srce_startofpacket               : out   std_logic;
         srce_endofpacket                 : out   std_logic;
         srce_ready                       : in    std_logic;
         sink_valid                       : in    std_logic;
         sink_data                        : in    std_logic_vector(31 downto 0);
         sink_channel                     : in    std_logic_vector(7 downto 0);
         sink_error                       : in    std_logic_vector(7 downto 0);
         sink_startofpacket               : in    std_logic;
         sink_endofpacket                 : in    std_logic;
         sink_ready                       : out   std_logic
     );
   end component VIP_TOP;

----------------------------------------------------------------------------------------------------
-- SIGNAL
----------------------------------------------------------------------------------------------------
signal s_enable_io                        : std_logic_vector(31 downto 0);
-- VIP
signal reset_n                            : std_logic;
signal s_ff_rd_valid                      : std_logic;
signal s_ff_rd_data                       : std_logic_vector(31 downto 0);
signal s_ff_rd_channel                    : std_logic_vector(7 downto 0);   
signal s_ff_rd_error                      : std_logic_vector(7 downto 0);
signal s_ff_rd_startofpacket              : std_logic;
signal s_ff_rd_endofpacket                : std_logic;
signal s_ff_rd_ready                      : std_logic;
signal s_ff_wr_valid                      : std_logic;
signal s_ff_wr_data                       : std_logic_vector(31 downto 0);
signal s_ff_wr_channel                    : std_logic_vector(7 downto 0);
signal s_ff_wr_error                      : std_logic_vector(7 downto 0);
signal s_ff_wr_startofpacket              : std_logic;
signal s_ff_wr_endofpacket                : std_logic;
signal s_ff_wr_ready                      : std_logic;


begin

reset_n <= KEY(0);

----------------------------------------------------------------------------------------------------
-- CPU Nios
----------------------------------------------------------------------------------------------------
   DE0_TEST_Nios_inst : component DE0_TEST_Nios
      port map
      (
         reset_reset_n                    => reset_n,
         clk_clk                          => CLOCK_50,
         -- out_port_from_the_pio_led        => LED,
         sdram_wire_addr                  => DRAM_ADDR,
         sdram_wire_ba                    => DRAM_BA,
         sdram_wire_cas_n                 => DRAM_CAS_N,
         sdram_wire_cke                   => DRAM_CKE,
         sdram_wire_cs_n                  => DRAM_CS_N,
         sdram_wire_dq                    => DRAM_DQ,
         sdram_wire_dqm                   => DRAM_DQM,
         sdram_wire_ras_n                 => DRAM_RAS_N,
         sdram_wire_we_n                  => DRAM_WE_N,
         altpll_sdram_clk                 => DRAM_CLK,
         altpll_areset_conduit_export     => '0',
         altpll_locked_conduit_export     => open,
         altpll_phasedone_conduit_export  => open,
         uart_0_rxd                       => '0',
         uart_0_txd                       => open,
         ff_rd_valid                      => s_ff_rd_valid         ,
         ff_rd_data                       => s_ff_rd_data          ,
         ff_rd_channel                    => s_ff_rd_channel       ,
         ff_rd_error                      => s_ff_rd_error         ,
         ff_rd_startofpacket              => s_ff_rd_startofpacket ,
         ff_rd_endofpacket                => s_ff_rd_endofpacket   ,
         ff_rd_ready                      => s_ff_rd_ready         ,
         ff_wr_valid                      => s_ff_wr_valid         ,
         ff_wr_data                       => s_ff_wr_data          ,
         ff_wr_channel                    => s_ff_wr_channel       ,
         ff_wr_error                      => s_ff_wr_error         ,
         ff_wr_startofpacket              => s_ff_wr_startofpacket ,
         ff_wr_endofpacket                => s_ff_wr_endofpacket   ,
         ff_wr_ready                      => s_ff_wr_ready,
         enable_io_export                 => s_enable_io
      );

----------------------------------------------------------------------------------------------------
-- VIP Top
----------------------------------------------------------------------------------------------------
   VIP_TOP_inst : VIP_TOP
      generic map
      (
         ENABLE_BUSWIDTH                  => c_ENABLE_BUSWIDTH
      )
      port map
      (
         clk                              => DRAM_CLK,
         reset_n                          => reset_n,
         enable                           => s_enable_io(c_ENABLE_BUSWIDTH -1 downto 0),
         srce_valid                       => s_ff_rd_valid         ,
         srce_data                        => s_ff_rd_data          ,
         srce_channel                     => s_ff_rd_channel       ,
         srce_error                       => s_ff_rd_error         ,
         srce_startofpacket               => s_ff_rd_startofpacket ,
         srce_endofpacket                 => s_ff_rd_endofpacket   ,
         srce_ready                       => s_ff_rd_ready         ,
         sink_valid                       => s_ff_wr_valid         ,
         sink_data                        => s_ff_wr_data          ,
         sink_channel                     => s_ff_wr_channel       ,
         sink_error                       => s_ff_wr_error         ,
         sink_startofpacket               => s_ff_wr_startofpacket ,
         sink_endofpacket                 => s_ff_wr_endofpacket   ,
         sink_ready                       => s_ff_wr_ready
     );

end architecture structural;